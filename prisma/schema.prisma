// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("PG_DATABASE_URL")
  directUrl = env("PG_DIRECT_DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email    String  @unique
  name     String?
  password String

  workInterval   Int? @default(50) @map("work_interval")
  breakInterval  Int? @default(10) @map("break_interval")
  intervalsCount Int? @default(7) @map("intervals_count")

  tasks            Task[]
  timeBlocks       TimeBlock[]
  pomodoroSessions PomodoroSession[]
  // userVerification UserVerification?

  authProvider AuthenticationProvider @default(self) @map("auth_provider")

  @@map("user")
}

enum AuthenticationProvider {
  self
  google
}

// model UserVerification {
//   id String @id @default(cuid())
//
//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @updatedAt @map("updated_at")
//
//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId String @unique @map("user_id")
//
//   secret String
//   status VerificationStatus? @default(requested)
//
//   @@map("user_verification")
// }
//
// enum VerificationStatus {
//   requested
//   accepted
//   denied
// }

model Task {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name        String
  priority    Priority?
  isCompleted Boolean?  @default(false) @map("is_completed")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("task")
}

model TimeBlock {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name     String
  color    String?
  duration Int
  order    Int     @default(1)

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("time_block")
}

model PomodoroSession {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  isCompleted Boolean? @default(false) @map("is_completed")

  user   User            @relation(fields: [userId], references: [id])
  userId String          @map("user_id")
  rounds PomodoroRound[]

  @@map("pomodoro_session")
}

model PomodoroRound {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  totalSeconds Int      @default(0) @map("total_seconds")
  isCompleted  Boolean? @default(false) @map("is_completed")

  pomodoroSession   PomodoroSession @relation(fields: [pomodoroSessionId], references: [id], onDelete: Cascade)
  pomodoroSessionId String          @map("pomodoro_session_id")

  @@map("pomodoro_round")
}

enum Priority {
  low
  medium
  high
}
